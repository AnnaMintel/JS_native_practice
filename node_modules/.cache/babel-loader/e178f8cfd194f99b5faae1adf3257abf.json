{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/hannamintel/MY FILES/FRONTEND DEV/STEP 4. REACT/JS Lessons \\u0421\\u0420\\u0415\\u0414\\u0410/src/containers/CurrencyExchangeContainer/CurrencyEContainer.tsx\";\nimport React from 'react';\nimport CurrencyExchange from '../../components/CurrencyExchange/CurrencyExchange';\nimport { ChangeActionAC, ChangeCurrencyFieldAC, СhangeCurrentCurrencyAC } from '../../redux/actions';\nimport { connect } from 'react-redux';\n\nconst CurrencyEContainer = props => {\n  const {\n    currencies,\n    currentCurrency,\n    isBuying,\n    amountOfBYN,\n    amountOfCurrency,\n    setCurrencyAmount,\n    setAction,\n    changeCurrency\n  } = props;\n  let currencyRate = 0;\n  const currenciesName = currencies.map(currency => {\n    if (currency.currencyName === currentCurrency) {\n      currencyRate = isBuying ? currency.buyRate : currency.sellRate;\n    }\n\n    return currency.currencyName;\n  });\n\n  const changeCurrencyField = e => {\n    let value = e.currentTarget.value;\n    if (!isFinite(+value)) return;\n\n    if (e.currentTarget.dataset.currency) {\n      const trigger = e.currentTarget.dataset.currency;\n\n      if (trigger === 'byn') {\n        if (value === '') {\n          setCurrencyAmount(value, value);\n        } else {\n          setCurrencyAmount(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));\n        }\n      } else {\n        if (value === '') {\n          setCurrencyAmount(value, value);\n        } else {\n          setCurrencyAmount((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);\n        }\n      }\n    }\n  };\n\n  const changeAction = e => {\n    e.currentTarget.dataset.action === 'buy' ? setAction(true) : setAction(false);\n  };\n\n  const changeCurrentCurrency = e => {\n    e.currentTarget.dataset.currency && changeCurrency(e.currentTarget.dataset.currency);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CurrencyExchange, {\n      currenciesName: currenciesName,\n      currentCurrency: currentCurrency,\n      currencyRate: currencyRate,\n      isBuying: isBuying,\n      amountOfBYN: amountOfBYN,\n      amountOfCurrency: amountOfCurrency,\n      changeCurrencyField: changeCurrencyField,\n      changeAction: changeAction,\n      changeCurrentCurrency: changeCurrentCurrency\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n\n_c = CurrencyEContainer;\n\nconst mapStateToProps = ({\n  currency\n}) => {\n  return {\n    currencies: currency.currencies,\n    currentCurrency: currency.currentCurrency,\n    isBuying: currency.isBuying,\n    amountOfBYN: currency.amountOfBYN,\n    amountOfCurrency: currency.amountOfCurrency\n  };\n}; // @ts-ignore\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setCurrencyAmount(amountOfBYN, amountOfCurrency) {\n      dispatch(ChangeCurrencyFieldAC(amountOfBYN, amountOfCurrency));\n    },\n\n    setAction(isBuying) {\n      dispatch(ChangeActionAC(isBuying));\n    },\n\n    changeCurrency(currency) {\n      dispatch(СhangeCurrentCurrencyAC(currency));\n    }\n\n  };\n}; // @ts-ignore\n\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(CurrencyEContainer);\nconst obj = {\n  name: \"anna\",\n  age: 25\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CurrencyEContainer\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/hannamintel/MY FILES/FRONTEND DEV/STEP 4. REACT/JS Lessons СРЕДА/src/containers/CurrencyExchangeContainer/CurrencyEContainer.tsx"],"names":["React","CurrencyExchange","ChangeActionAC","ChangeCurrencyFieldAC","СhangeCurrentCurrencyAC","connect","CurrencyEContainer","props","currencies","currentCurrency","isBuying","amountOfBYN","amountOfCurrency","setCurrencyAmount","setAction","changeCurrency","currencyRate","currenciesName","map","currency","currencyName","buyRate","sellRate","changeCurrencyField","e","value","currentTarget","isFinite","dataset","trigger","Number","toFixed","changeAction","action","changeCurrentCurrency","mapStateToProps","mapDispatchToProps","dispatch","connector","obj","name","age"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport CurrencyExchange from '../../components/CurrencyExchange/CurrencyExchange';\r\nimport { CurrencyState, CurrencyType } from '../../redux/currencyReducer';\r\nimport { Dispatch } from 'redux';\r\nimport {\r\n    ChangeActionAC,\r\n    ChangeCurrencyFieldAC,\r\n    СhangeCurrentCurrencyAC,\r\n    CurrencyReducersTypes\r\n} from '../../redux/actions';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\n\r\nconst CurrencyEContainer: React.FC<TProps> = props => {\r\n\r\n    const {\r\n        currencies,\r\n        currentCurrency,\r\n        isBuying,\r\n        amountOfBYN,\r\n        amountOfCurrency,\r\n        setCurrencyAmount,\r\n        setAction,\r\n        changeCurrency,\r\n    } = props;\r\n\r\n    let currencyRate: number = 0;\r\n    const currenciesName = currencies.map((currency: CurrencyType) => {\r\n        if (currency.currencyName === currentCurrency) {\r\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate;\r\n        }\r\n        return currency.currencyName;\r\n    });\r\n\r\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value;\r\n        if (!isFinite(+value)) return;\r\n        if (e.currentTarget.dataset.currency) {\r\n            const trigger: string = e.currentTarget.dataset.currency;\r\n            if (trigger === 'byn') {\r\n                if (value === '') {\r\n                    setCurrencyAmount(value, value);\r\n                } else {\r\n                    setCurrencyAmount(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));\r\n                }\r\n            } else {\r\n                if (value === '') {\r\n                    setCurrencyAmount(value, value);\r\n                } else {\r\n                    setCurrencyAmount((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        e.currentTarget.dataset.action === 'buy' ? setAction(true) : setAction(false);\r\n    };\r\n\r\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n        e.currentTarget.dataset.currency && changeCurrency(e.currentTarget.dataset.currency);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CurrencyExchange\r\n                currenciesName={currenciesName}\r\n                currentCurrency={currentCurrency}\r\n                currencyRate={currencyRate}\r\n                isBuying={isBuying}\r\n                amountOfBYN={amountOfBYN}\r\n                amountOfCurrency={amountOfCurrency}\r\n                changeCurrencyField={changeCurrencyField}\r\n                changeAction={changeAction}\r\n                changeCurrentCurrency={changeCurrentCurrency}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ( { currency } : {currency: CurrencyState} ): CurrencyState => {\r\n    return {\r\n        currencies: currency.currencies,\r\n        currentCurrency: currency.currentCurrency,\r\n        isBuying: currency.isBuying,\r\n        amountOfBYN: currency.amountOfBYN,\r\n        amountOfCurrency: currency.amountOfCurrency,\r\n    };\r\n};\r\n\r\n// @ts-ignore\r\nconst mapDispatchToProps = (dispatch: Dispatch<CurrencyReducersTypes>) : any => {\r\n    return {\r\n        setCurrencyAmount(amountOfBYN: string, amountOfCurrency: string) {\r\n            dispatch(ChangeCurrencyFieldAC(amountOfBYN, amountOfCurrency));\r\n        },\r\n        setAction(isBuying: boolean) {\r\n            dispatch(ChangeActionAC(isBuying));\r\n        },\r\n        changeCurrency(currency: string) {\r\n            dispatch(СhangeCurrentCurrencyAC(currency));\r\n        },\r\n    };\r\n};\r\n\r\n// @ts-ignore\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype TProps = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(CurrencyEContainer);\r\n\r\nconst obj = {\r\n    name : \"anna\",\r\n    age:25\r\n}\r\ntype ObjName = typeof obj;"]},"metadata":{},"sourceType":"module"}